C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 14:37:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2           * SPI Master Code
   3           * 
   4           * This file contains the implementation of the SPI Master, developed as part of the EE337 - Microprocesso
             -rs Laboratory course 
   5           * during the academic year 2024?25 at the Indian Institute of Technology Bombay.
   6           * 
   7           * This code is intended solely for academic use.
   8           * 
   9           * Authors:
  10           * - Yaswanth Ram Kumar (Roll No: 23B1277)
  11           * - Pragyan Paramita Behera (Roll No: 23B1278)
  12           * 
  13           * Department of Electrical Engineering,  
  14           * Indian Institute of Technology Bombay,  
  15           * Powai, Mumbai - 400076, India.
  16           */
  17          #include <at89c5131.h>
  18          #include "lcd.h"
  19          #include "serial.h"     // UART interfacing functions
  20          #include <stdio.h>
  21          
  22          //void lcd_write_int(unsigned char num);  // Custom int print
  23          unsigned char receive_num(void)
  24          {
  25   1          char buffer[4];  // Max 3 digits + null terminator
  26   1          unsigned char i = 0;
  27   1          unsigned char num = 0;
  28   1          char ch;
  29   1      
  30   1          // Read characters until Enter is pressed
  31   1          while (1)
  32   1          {
  33   2              ch = receive_char();       // Get character from UART
  34   2              transmit_char(ch);         // Echo back
  35   2      
  36   2              if (ch == '\r')            // Enter key (Carriage Return)
  37   2              {
  38   3                  buffer[i] = '\0';      // Null-terminate the string
  39   3                  break;
  40   3              }
  41   2      
  42   2              // Accept only digits, and at most 3 digits
  43   2              if (ch >= '0' && ch <= '9' && i < 3)
  44   2              {
  45   3                  buffer[i++] = ch;
  46   3              }
  47   2          }
  48   1      
  49   1          // Convert buffer to number
  50   1          for (i = 0; buffer[i] != '\0'; i++)
  51   1          {
  52   2              num = num * 10 + (buffer[i] - '0');
  53   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 14:37:12 PAGE 2   

  54   1      
  55   1          return num; // Will be in range 0–255
  56   1      }
  57          void master_greet_lcd() {
  58   1          msdelay(10);
  59   1          lcd_cmd(0x80);
  60   1          msdelay(4);
  61   1          lcd_write_string("SPI Master");
  62   1      
  63   1          lcd_cmd(0xC0);
  64   1          msdelay(4);
  65   1          lcd_write_string("Running");
  66   1          msdelay(500);
  67   1          lcd_write_char('.');
  68   1          msdelay(500);
  69   1          lcd_write_char('.');
  70   1          msdelay(500);
  71   1          lcd_write_char('.');
  72   1          msdelay(500);
  73   1      }
  74          
  75          
  76          // Send and receive 1 byte over SPI
  77          unsigned char spi_send(unsigned char dat) {
  78   1          SPDAT = dat;
  79   1          while (!(SPSTA & 0x80));  // wait for transfer complete
  80   1          return SPDAT;
  81   1      }
  82          
  83          void main(void) {
  84   1          unsigned char response;
  85   1          unsigned char prime1 = 7, prime2 = 13;
  86   1      /**Configuration For Serial Communication*********************************/   
  87   1          //TMOD = 0x01; Write this explicitly in Serial.h
  88   1          ET0 = 1; // Enable Timer 0 interrupt
  89   1          EA = 1;  // Enable global interrupts
  90   1         // P1 = 0x0F;
  91   1      /*************************************************************************/
  92   1         uart_init();
  93   1          lcd_init();
  94   1          master_greet_lcd();
  95   1      transmit_string("Enter the prime number 'a': ");
  96   1        prime1 = receive_num();
  97   1          transmit_string("Enter the prime number 'b': ");
  98   1        prime2 = receive_num();
  99   1          SPCON = 0x7F;  // Master mode, Fclk/16, CPOL=1, CPHA=1, SSDIS=1
 100   1          msdelay(500);
 101   1      
 102   1          lcd_cmd(0x01);
 103   1          lcd_cmd(0x80);
 104   1          lcd_write_string("Sending Primes");
 105   1      
 106   1          msdelay(1000);
 107   1          spi_send(prime1);
 108   1          msdelay(1000);
 109   1          spi_send(prime2);
 110   1          msdelay(1000);
 111   1      
 112   1          lcd_cmd(0xC0);
 113   1          lcd_write_string("Waiting Result");
 114   1      
 115   1          msdelay(1500);  // Wait so slave has time to send response
C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 14:37:12 PAGE 3   

 116   1      
 117   1          response = spi_send(0x00);  // Dummy write to receive
 118   1      
 119   1          lcd_cmd(0x01);
 120   1          lcd_cmd(0x80);
 121   1          if (response == 1) {
 122   2              lcd_write_string("Sum is Prime");
 123   2              transmit_string("Sum is a prime number Sir.");
 124   2      
 125   2          } else if (response == 2) {
 126   2              lcd_write_string("Sum Not Prime");
 127   2              transmit_string("Sum is NOT a prime number Sir."); 
 128   2          } else {
 129   2              lcd_write_string("Unexpected Val");
 130   2              lcd_cmd(0xC0);
 131   2              lcd_write_char(response+'0');
 132   2              transmit_string("Unexpected Val");
 133   2          }
 134   1      
 135   1          while (1);
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    786    ----
   CONSTANT SIZE    =    207    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
