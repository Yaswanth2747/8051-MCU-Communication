C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 19:46:20 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2           * SPI Master Code
   3           * 
   4           * This file contains the implementation of the SPI Master, developed as part of the EE337 - Microprocesso
             -rs Laboratory course 
   5           * during the academic year 2024–25 at the Indian Institute of Technology Bombay.
   6           * 
   7           * This code is intended solely for academic use.
   8           * 
   9           * Authors:
  10           * - Yaswanth Ram Kumar (Roll No: 23B1277)
  11           * - Pragyan Paramita Behera (Roll No: 23B1278)
  12           * 
  13           * Department of Electrical Engineering,  
  14           * Indian Institute of Technology Bombay,  
  15           * Powai, Mumbai - 400076, India.
  16           */
  17          
  18          #include <at89c5131.h>
  19          #include "lcd.h"
  20          #include "serial.h"     // UART interfacing functions
  21          #include <stdio.h>
  22          
  23          // Read a number (max 3 digits) from UART input
  24          unsigned char receive_num(void)
  25          {
  26   1          char buffer[4];  // Max 3 digits + null terminator
  27   1          unsigned char i = 0;
  28   1          unsigned char num = 0;
  29   1          char ch;
  30   1      
  31   1          // Read characters until Enter is pressed
  32   1          while (1)
  33   1          {
  34   2              ch = receive_char();       // Get character from UART
  35   2              transmit_char(ch);         // Echo back
  36   2      
  37   2              if (ch == '\r')            // Enter key (Carriage Return)
  38   2              {
  39   3                  buffer[i] = '\0';      // Null-terminate the string
  40   3                  break;
  41   3              }
  42   2      
  43   2              // Accept only digits, and at most 3 digits
  44   2              if (ch >= '0' && ch <= '9' && i < 3)
  45   2              {
  46   3                  buffer[i++] = ch;
  47   3              }
  48   2          }
  49   1      
  50   1          // Convert buffer to number
  51   1          for (i = 0; buffer[i] != '\0'; i++)
  52   1          {
  53   2              num = num * 10 + (buffer[i] - '0');
C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 19:46:20 PAGE 2   

  54   2          }
  55   1      
  56   1          return num; // Will be in range 0–255
  57   1      }
  58          
  59          // Display welcome message on LCD
  60          void master_greet_lcd() {
  61   1          msdelay(10);
  62   1          lcd_cmd(0x80);
  63   1          msdelay(4);
  64   1          lcd_write_string("SPI Master");
  65   1      
  66   1          lcd_cmd(0xC0);
  67   1          msdelay(4);
  68   1          lcd_write_string("Running");
  69   1          msdelay(500);
  70   1          lcd_write_char('.');
  71   1          msdelay(500);
  72   1          lcd_write_char('.');
  73   1          msdelay(500);
  74   1          lcd_write_char('.');
  75   1          msdelay(500);
  76   1      }
  77          
  78          // Send and receive 1 byte over SPI
  79          unsigned char spi_send(unsigned char dat) {
  80   1          SPDAT = dat;
  81   1          while (!(SPSTA & 0x80));  // Wait for transfer complete
  82   1          return SPDAT;
  83   1      }
  84          
  85          void main(void) {
  86   1          unsigned char response;
  87   1          unsigned char nums[6];
  88   1          unsigned char i;
  89   1      
  90   1          /** Configuration For Serial Communication **/
  91   1          // TMOD = 0x01;  // This is written explicitly in serial.h
  92   1          ET0 = 1; // Enable Timer 0 interrupt
  93   1          EA = 1;  // Enable global interrupts
  94   1          // P1 = 0x0F;
  95   1          /*********************************************/
  96   1      
  97   1          uart_init();
  98   1          lcd_init();
  99   1          master_greet_lcd();
 100   1      
 101   1          transmit_string("Enter 3 values for A (a1, a2, a3):\r\n");
 102   1          for (i = 0; i < 3; i++) {
 103   2              transmit_string("Enter value: ");
 104   2              nums[i] = receive_num();
 105   2          }
 106   1      
 107   1          transmit_string("Enter 3 values for B (b1, b2, b3):\r\n");
 108   1          for (i = 3; i < 6; i++) {
 109   2              transmit_string("Enter value: ");
 110   2              nums[i] = receive_num();
 111   2          }
 112   1      
 113   1          SPCON = 0x7F;  // Master mode, Fclk/16, CPOL=1, CPHA=1, SSDIS=1
 114   1          msdelay(500);
 115   1      
C51 COMPILER V9.60.7.0   MAIN                                                              04/10/2025 19:46:20 PAGE 3   

 116   1          lcd_cmd(0x01);
 117   1          lcd_cmd(0x80);
 118   1          lcd_write_string("Sending Data");
 119   1      
 120   1          for (i = 0; i < 6; i++) {
 121   2              msdelay(1000);
 122   2              spi_send(nums[i]);
 123   2          }
 124   1      
 125   1          lcd_cmd(0xC0);
 126   1          lcd_write_string("Waiting Result");
 127   1      
 128   1          msdelay(3500);  // Wait so slave has time to compute
 129   1      
 130   1          response = spi_send(0x00);  // Dummy write to receive
 131   1      
 132   1          lcd_cmd(0x01);
 133   1          lcd_cmd(0x80);
 134   1          if (response == 1) {
 135   2              lcd_write_string("Sum is Prime");
 136   2              transmit_string("Sum is a prime number Sir.");
 137   2      
 138   2          } else if (response == 2) {
 139   2              lcd_write_string("Sum Not Prime");
 140   2              transmit_string("Sum is NOT a prime number Sir."); 
 141   2          } else {
 142   2              lcd_write_string("Unexpected Val");
 143   2              lcd_cmd(0xC0);
 144   2              lcd_write_char(response+'0');
 145   2              transmit_string("Unexpected Val");
 146   2          }
 147   1          while (1);
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    828    ----
   CONSTANT SIZE    =    235    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
